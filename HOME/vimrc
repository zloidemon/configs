syntax on
set hlsearch
set cursorline
set backspace=2
set noai "auto indante
"4 spaces for tab
set nocp
filetype plugin on

" binary files:
augroup Binary
 au!
 au BufReadPre  *.EXE let &bin=1
 au BufReadPost *.EXE if &bin | %!xxd
 au BufReadPost *.EXE set ft=xxd | endif
 au BufWritePre *.EXE if &bin | %!xxd -r
 au BufWritePre *.EXE endif
 au BufWritePost *.EXE if &bin | %!xxd
 au BufWritePost *.EXE set nomod | endif
augroup END

set encoding=utf-8
set termencoding=utf-8

set fileencodings=utf-8,koi8-r,cp1251,cp866

" <F7> File fileformat (dos - <CR> <NL>, unix - <NL>, mac - <CR>)
map <F7>	:execute RotateFileFormat()<CR>
vmap <F7>	<C-C><F7>
imap <F7>	<C-O><F7>
let b:fformatindex=0
function! RotateFileFormat()
  let y = -1
  while y == -1
    let encstring = "#unix#dos#mac#"
    let x = match(encstring,"#",b:fformatindex)
    let y = match(encstring,"#",x+1)
    let b:fformatindex = x+1
    if y == -1
      let b:fformatindex = 0
    else
      let str = strpart(encstring,x+1,y-x-1)
      return ":set fileformat=".str
    endif
  endwhile
endfunction

" <F8> File encoding for open
" ucs-2le - MS Windows unicode encoding
map <F8>	:execute RotateEnc()<CR>
vmap <F8>	<C-C><F8>
imap <F8>	<C-O><F8>
let b:encindex=0
function! RotateEnc()
  let y = -1
  while y == -1
    let encstring = "#koi8-r#cp1251#8bit-cp866#utf-8#ucs-2le#"
    let x = match(encstring,"#",b:encindex)
    let y = match(encstring,"#",x+1)
    let b:encindex = x+1
    if y == -1
      let b:encindex = 0
    else
      let str = strpart(encstring,x+1,y-x-1)
      return ":e ++enc=".str
    endif
  endwhile
endfunction

" <Shift+F8> Force file encoding for open (encoding = fileencoding)
map <S-F8>	:execute ForceRotateEnc()<CR>
vmap <S-F8>	<C-C><S-F8>
imap <S-F8>	<C-O><S-F8>
let b:encindex=0
function! ForceRotateEnc()
  let y = -1
  while y == -1
    let encstring = "#koi8-r#cp1251#8bit-cp866#utf-8#ucs-2le#"
    let x = match(encstring,"#",b:encindex)
    let y = match(encstring,"#",x+1)
    let b:encindex = x+1
    if y == -1
      let b:encindex = 0
    else
      let str = strpart(encstring,x+1,y-x-1)
      :execute "set encoding=".str
      return ":e ++enc=".str
    endif
  endwhile
endfunction

" <Ctrl+F8> File encoding for save (convert)
map <C-F8>	:execute RotateFEnc()<CR>
vmap <C-F8>	<C-C><C-F8>
imap <C-F8>	<C-O><C-F8>
let b:fencindex=0
function! RotateFEnc()
  let y = -1
  while y == -1
    let encstring = "#koi8-r#cp1251#8bit-cp866#utf-8#ucs-2le#"
    let x = match(encstring,"#",b:fencindex)
    let y = match(encstring,"#",x+1)
    let b:fencindex = x+1
    if y == -1
      let b:fencindex = 0
    else
      let str = strpart(encstring,x+1,y-x-1)
      return ":set fenc=".str
    endif
  endwhile
endfunction

set statusline=%<%f:%P\ %l,%c\ %h%m%r%=%b\ 0x%B\ filetype=%{&filetype}\ format=%{&fileformat}\ fenc=%{&fileencoding}\ enc=%{&encoding}\ %{strftime(\"%H:%M\")}
set laststatus=2

set wildmenu
set wcm=<Tab>
menu Encoding.koi8-u :e ++enc=8bit-koi8-u<CR>
menu Encoding.windows-1251 :e ++enc=8bit-cp1251<CR>
menu Encoding.ibm-866 :e ++enc=8bit-ibm866<CR>
menu Encoding.utf-8 :e ++enc=2byte-utf-8 <CR>
map <F10> :emenu Encoding.<TAB> 

if has("autocmd") 
  " When editing a file, always jump to the last known cursor position. 
  "   " Don't do it when the position is invalid or when inside an event
  "   handler 
  "     " (happens when dropping a file on gvim). 
  autocmd BufReadPost * 
  \ if line("'\"") > 0 && line("'\"") <= line("$") | 
  \   exe "normal g`\"" | 
  \ endif 
endif " has("autocmd")
 
"256 Colors
"if &term == "xterm"
" let &term = "xterm-256color"
"endif 
"Closetag.vim
"let g:closetag_html_style=1
"source ~/.vim/scripts/closetag.vim 
"au Filetype html,xml,xsl source ~/.vim/scripts/closetag.vim

" По нажатии клавиши F11 переключение словарей для проверки орфографии (русский+английский, английский, русский, выкл)
if version >= 700
"   По умолчанию проверка орфографии выключена.
    setlocal spell spelllang=
    setlocal nospell
    function ChangeSpellLang()
        if &spelllang =~ "ru,en"
            setlocal spell spelllang=en_us
            echo "spelllang: en"
        elseif &spelllang =~ "en_us"
            setlocal spell spelllang=ru
            echo "spelllang: ru"
        elseif &spelllang =~ "ru"
            setlocal spell spelllang=
            setlocal nospell
            echo "spelllang: off"
        else
            setlocal spell spelllang=ru,en
            echo "spelllang: ru,en"
        endif
    endfunc

    " map spell on/off for English/Russian
    map <F11> <Esc>:call ChangeSpellLang()<CR>
endif
set nu
set smartindent
nmap <C-k> <C-W>k<C-W>_ " окно вверх
imap <C-k> <Esc><C-W>k<C-W>_a " окно вверх
nmap <C-j> <C-W>j<C-W>_ " окно вниз
imap <C-j> <Esc><C-W>j<C-W>_a " окно вниз
nmap <C-h> :tabp<CR> " previous tab
nmap <C-l> :tabn<CR> " next tab
"nmap <S-A-right> :tabp<CR> " previous tab
"nmap <S-A-left> :tabn<CR> " next tab
" -------------- ru
map й q
map ц w
map у e
map к r
map е t
map н y
map г u
map ш i
map щ o
map з p
map х [
map ъ ]
map ф a
map ы s
map в d
map а f
map п g
map р h
map о j
map л k
map д l
map ж ;
map э '
map я z
map ч x
map с c
map м v
map и b
map т n
map ь m
map Й Q
map Ц W
map У E
map К R
map Е T
map Н Y
map Г U
map Ш I
map Щ O
map З P
map Х {
map Ъ }
map Ф A
map Ы S
map В D
map А F
map П G
map Р H
map О J
map Л K
map Д L
map Ж :
map Э "
map Я Z
map Ч X
map С C
map М V
map И B
map Т N
map Ь M
map Б <
map Ю >
" эти две пары конфликтуют
" можно оставить либо одну, либо другую
"map б ,
map ю .
" map . /
" map , ?
"####################################################################
"                              FOLDING
"####################################################################
"zc - свернуть блок
"zo - развернуть блок
"zM - закрыть все блоки
"zR - открыть все блоки
"za - инвертирование (если открыто - закрыть, если закрыто - открыть)
hi Folded ctermbg=cyan		ctermfg=black
" Perl
function! GetPerlFold()
  if getline(v:lnum) =~ '^\s*sub\s'
    return ">1"
  elseif getline(v:lnum) =~ '^\}\s*$'
    return "<1"
  elseif getline(v:lnum) =~ '\}\s*$'
    let my_perlnum = v:lnum
    let my_perlmax = line("$")
    while (1)
      let my_perlnum = my_perlnum + 1
      if my_perlnum > my_perlmax
	return "<1"
      endif
      let my_perldata = getline(my_perlnum)
      if my_perldata =~ '^\s*\(\#.*\)\?$'
	" do nothing
      elseif my_perldata =~ '^\s*sub\s'
	return "<1"
      else
	return "="
      endif
    endwhile
  else
    return "="
  endif
endfunction
au FileType perl set foldenable
au FileType perl setlocal foldexpr=GetPerlFold()
au FileType perl setlocal foldmethod=expr
" JavaScript
function! JavaScriptFold() 
	setl foldmethod=syntax
	setl foldlevelstart=1
	syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

	function! FoldText()
	return substitute(getline(v:foldstart), '{.*', '{...}', '')
	endfunction
	setl foldtext=FoldText()
endfunction
function! JavaScriptFold2() 
	syn match   javaScriptFunction      "\<function\>"
	syn region  javaScriptFunctionFold  start="\<function\>.*[^};]$" end="^\z1}.*$" transparent fold keepend

	syn sync match javaScriptSync       grouphere javaScriptFunctionFold "\<function\>"
	syn sync match javaScriptSync       grouphere NONE "^}"

	setlocal foldmethod=syntax
	setlocal foldtext=getline(v:foldstart)
	syn sync fromstart
	syn sync maxlines=100
endfunction
function! Folding()
    setl foldmethod=syntax
"    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    if &diff
        let b:Start=getline(v:foldstart).' ... '
        let b:End=getline(v:foldend)
    else
        let b:Start=substitute(substitute(getline(v:foldstart),'\t','    ','g'),'{.*','{...','')
        let b:End=substitute(substitute(getline(v:foldend),'\t','    ','g'),'.*}','}','')
    endif
    return b:Start.b:End.'   ['.(v:foldend-v:foldstart).' lines] '
    endfunction
    "setl foldtext=FoldText()
endfunction

map <F9> <Esc>:call Folding()<CR>
au FileType css,c,cpp,java,cs setl fen
au BufRead,BufNewFile *.jinja,*.macro set filetype=jinja
au FileType python setl tabstop=4 shiftwidth=4 expandtab
au FileType lua setl tabstop=4 shiftwidth=4 expandtab
au FileType t setl tabstop=4 shiftwidth=4 expandtab
au FileType html setl tabstop=2 shiftwidth=2 expandtab
au FileType javascript setl tabstop=2 shiftwidth=2 expandtab

"au FileType javascript call JavaScriptFold2()
"au FileType javascript setl fen

au BufRead,BufNewFile sip.conf       call s:FTAsterisk()
au BufRead,BufNewFile extensions.conf       call s:FTAsterisk()
func! s:FTAsterisk()
   setf asterisk
endfunc

colorscheme desert
highlight ColorColumn ctermbg=gray
set colorcolumn=80
